<?php

// $Id$

/**
 * @defgroup signup_ecommerce_core Core drupal hooks
 */

/**
 * Implementation of hook_help().
 * @ingroup signup_ecommerce_core
 */
function signup_ecommerce_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Integrates the signup and e-commerce modules.');

    case 'admin/help#signup_ecommerce':
      return '<p>'. t('signup_ecommerce provides basic integration between the ecommerce module and the signup module, specifically allowing automatic user signup upon purchase of an enabled product type.') .'</p>'.
        '<p>'. t('To enable the feature, go to the <a href="%url">content types configuration page</a>, and click %configure for the content type you wish to enable. Make sure that the %allow_signups and %signup_ecommerce_integration checkboxes are checked, and save the settings.', array('%url' => url('admin/settings/content-types'), '%configure' => theme('placeholder', t('configure')), '%allow_signups' => theme('placeholder', t('Allow signups by default')), '%signup_ecommerce_integration' => theme('placeholder', t('Signup E-commerce integration')))) .'</p>'.
        '<p>'. t('For the node type you just enabled, any time somebody purchases a product of that node type, they will automatically be signed up for that node. The signup information will include the transaction ID for reference.') .'</p>';
  }
}

/**
 * @defgroup signup_form_alter Functions for form_alter integration
 */

 /**
 * hook_form_alter implementation
 *
 * @ingroup signup_ecommerce_form_alter
*/
function signup_ecommerce_form_alter($form_id, &$form) {
  if (isset($form['type']) && $form['type']['#value'] .'_node_settings' == $form_id) {
    $type = $form['type']['#value'];
    $form['workflow']['signup_ecommerce'] = array(
      '#type' => 'fieldset',
      '#title' => t('Signup E-commerce integration'),
    );
    $form['workflow']['signup_ecommerce']['signup_ecommerce_'. $type] = array(
      '#type' => 'checkbox',
      '#title' => t('Enabled'),
      '#return_value' => 1,
      '#default_value' => variable_get('signup_ecommerce_'. $type, FALSE) == 1,
      '#description' => t('If selected, users will be automatically signed up for any products of this node type that they purchase.'),
    );
    $form['workflow']['signup_ecommerce']['signup_ecommerce_workflow_'. $type] = array(
      '#type' => 'radios',
      '#title' => t('Workflow'),
      '#default_value' => variable_get('signup_ecommerce_workflow_'. $type, 0),
      '#options' => array(
        1 => t('Order completion'),
        2 => t('Payment completion'),
      ),
      '#description' => t('Determines when the autosignup action occurs for products of this node type.'),
    );
  }
}

/**
 * @defgroup signup_ecommerce_signup Functions in signup core
 */

 /**
 * Suppresses the display of the signup form
 *
 * @ingroup signup_ecommerce_signup
*/
function signup_ecommerce_signup_suppress($node) {
  global $user;
  $signed_up = db_num_rows(db_query("SELECT nid FROM {signup_log} WHERE nid = %d AND uid = %d", $node->nid, $user->uid));
  if ($signed_up) {
    return FALSE;
  }
  else {
    return _signup_ecommerce_is_autosignup($node);
  }
}

/**
 * @defgroup signup_ecommerce_ecommerce
 * Functions in ecommerce core.
 */

/**
 * Add signups if necessary -- upon payment completion option
 * @ingroup signup_ecommerce_ecommerce
 *
 * @param $t
 *   The transaction array for an order. This keeps growing in data from screen
 *   to screen.
 * @param $op
 *   What kind of action is being performed.
 */
function signup_ecommerce_ecommerceapi($t, $op) {
  switch ($op) {
    case 'on payment completion':
      if (module_exist('signup')) {
        if (is_array($t['items'])) {
          // Loop through each item. If it's an autosignup node, and user
          // hasn't already signed up, then sign 'em up.
          foreach ($t['items'] as $item) {
            $node = node_load($item->nid);
            $signed_up = db_num_rows(db_query("SELECT nid FROM {signup_log} WHERE nid = %d AND uid = %d", $node->nid, $t['uid']));
            if (_signup_ecommerce_is_autosignup($node) && !$signed_up && variable_get('signup_ecommerce_workflow_'. $node->type, 0) == 2) {
              $edit['nid'] = $node->nid;
              $edit['uid'] = $t['uid'];
              $edit['signup_form_data']['TransactionID'] = $t['txnid'];
              signup_sign_up_user($edit);
              _signup_ecommerce_watchdog_message($t['uid'], $node);
            }
          }
        }
      }
      break;
  }
}

/**
 * Add signups if necessary -- upon order placement option
 * @ingroup signup_ecommerce_ecommerce
 *
 * @param &$txn
 *   The transaction object for an order. This keeps growing in data from
 *   screen to screen.
 * @param $op
 *   What kind of action is being performed.
 */
function signup_ecommerce_ec_transactionapi(&$txn, $op) {

  switch ($op) {
    case 'insert':
      if (module_exist('signup')) {
        // load the transaction
        $t = store_transaction_load($txn->txnid);
        if (is_array($t->items)) {
          // Loop through each item. If it's an autosignup node, and user
          // hasn't already signed up, then sign 'em up.
          foreach ($t->items as $item) {
            $node = node_load($item->nid);
            $signed_up = db_num_rows(db_query('SELECT nid FROM {signup_log} WHERE nid = %d AND uid = %d', $node->nid, $t->uid));
            if (_signup_ecommerce_is_autosignup($node) && !$signed_up && variable_get('signup_ecommerce_workflow_'. $node->type, 0) == 1) {
              $edit['nid'] = $node->nid;
              $edit['uid'] = $t->uid;
              $edit['signup_form_data']['TransactionID'] = $txn->txnid;
              signup_sign_up_user($edit);
              _signup_ecommerce_watchdog_message($t->uid, $node);
            }
          }
        }
      }
      break;
  }
}

/**
 * @defgroup signup_ecommerce internal.
 * Internal functions in signup_ecommerce.
 */

/**
 * Verify if the node in question is an autosignup node
 * @ingroup signup_ecommerce_internal
 *
 * @param $node
 *   The node to verify.
*/
function _signup_ecommerce_is_autosignup($node) {
  return variable_get('signup_form_'. $node->type, FALSE) && variable_get('signup_ecommerce_'. $node->type, FALSE) && product_load($node);
}

/**
 * Post watchdog message that user was auto-signed up to a node
 * @ingroup signup_ecommerce_internal
 *
 * @param $uid
 *   The user ID of the autosigned user.
 * @param $node
 *   The node the user was signup up to.
*/
function _signup_ecommerce_watchdog_message($uid, $node) {
  $user = user_load(array('uid' => $uid));
  watchdog('signup_ecommerce', t('%user (%user_url) auto-signed up to %node', array('%user' => theme('placeholder', $user->name), '%user_url' => url("user/$user->uid"), '%node' => theme('placeholder', $node->title))), WATCHDOG_NOTICE, l(t('view'), "node/$node->nid"));
}
