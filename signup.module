<?php
// $Id$

//  TODO's
//  1. add support limiting signups to certain roles, per node
//  2. veiwing/manual opening of closed signups
//  3. make datetime display dependent on medium date format display setting in admin/settings
//  4. adding support for custom auto-closing settings per node: time before event start, number of signups
//  5. better header info for emails sent to forwarding email address?
//  6. validation of forwarding email addresses
//  7. validation of user submitted data
//  8. catch remote user logins and get their email addy (currently signup relies on the email addy of a registered user for 
//     confirmation/reminder emails)
//  9. support for admin own signups
//  10. user page support where users can see a list of the events they've signed up for
//  11. ability for admins to cancel signups from the signup tab
//  12. feature to allow event admins to email signup group
//  13. fix reminder message notification so it doesn't display on signups where reminder has already been sent
//  14. make display of reminder email info conditional on whether node is event enabled (form edit page)
//  15. better themed user signup form?

include(drupal_get_path('module', 'signup') . '/signup.theme');

/**
 * @defgroup signup_core Core drupal hooks
 */

/**
 * Implementation of hook_cron().
 * @ingroup signup_core
 */
function signup_cron() {
  
  //only run this function if the event module is enabled
  if (module_exist('event')) {
    
    //get the current time, and pull all of the nodes for which the current time + the reminder_days_before time
    //is greater than the event's start date.  these are the events for which a reminder email needs to be sent
    $curtime = time(); 
    $result = db_query("SELECT n.title, n.nid, e.event_start, e.timezone, s.reminder_email, s.forwarding_email FROM {signup} s 
      INNER JOIN {node} n ON n.nid = s.nid INNER JOIN {event} e ON e.nid = s.nid WHERE s.completed = 0 AND 
      s.send_reminder = 1 AND (%d + ((s.reminder_days_before) * 86400)) > e.event_start", $curtime);
    
    //grab each event, construct the email header and subject, and query the signup log to pull all users who are
    //signed up for this event
    while ($event = db_fetch_object($result)) {
      $header = "From: $event->forwarding_email\nReply-to: $event->forwarding_email\nX-Mailer: 
        Drupal\nReturn-path: $event->forwarding_email\nErrors-to: $event->forwarding_email";
      $subject = t('Event reminder: %event', array('%event' => $event->title));                 
      $signups = db_query("SELECT u.name, u.mail FROM {signup_log} s_l INNER JOIN {users} u ON u.uid = s_l.uid 
        WHERE s_l.nid = %d", $event->nid);
      
      //get timezone offset
      $offset = event_get_offset($event->timezone, $event->event_start);
      
      //loop through the users, composing their customized message and sending the email
      while ($signup = db_fetch_object($signups)) {       
        $trans = array("%event" => $event->title, "%time" => _event_date(variable_get('signup_date_string', 'D, M jS, g:i A'), 
        $event->event_start, $offset), "%username" => $signup->name, "%useremail" => $signup->mail);
        $message = strtr($event->reminder_email, $trans);
        user_mail($signup->mail, $subject, $message, $header);
      }
      
      //reminders for this event are all sent, so mark it in the database so they're not sent again
      db_query("UPDATE {signup} SET send_reminder = 0 WHERE nid = %d", $event->nid);  
    }
    
    //calculate the closing time for the event, which is the current time + the number of hours before the event start
    //when closing is preferred.  query the database for all signup events which have a start time less than this, 
    $closing_time = $curtime + (variable_get('signup_close_early', 1) * 3600);  
    $result = db_query("SELECT s.nid FROM {signup} s INNER JOIN {event} e ON e.nid = s.nid WHERE 
      s.completed = 0 AND e.event_start < %d", $closing_time);
    
    //loop through the results, calling the event closing function
    while ($signup = db_fetch_object($result)) {
      signup_close_signup($signup->nid, $cron = 'yes');
    }
  } 
}

/**
 * Implementation of hook_help().
 * @ingroup signup_core
 */
function signup_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Allow users to sign up for events.');
      break;
    case 'admin/help#signup':
      return t('<p>Signup allows users to sign up for nodes of any type.  Includes options for sending a notification email to a selected email address upon a new user signup (good for notifying event coordinators, etc.) and a confirmation email to users who sign up--these options are per node.  When used on event nodes (with event.module installed and regular cron runs), it can also send out reminder emails to all signups X days before the start of the event (per node setting) and auto-close event signups 1 hour before their start (general setting). Settings exist for resticting signups to selected roles and content types.</p><br><p>To use signup, you must enable a node type for signups in administer->settings->content types, and you must also grant the \'allow signups\' permission to any user role for which you wish to allow signups in administer->access control. Each signup node will now have a place for users to sign up, and administrators with the \'admin signups\' privilege will be able to view signups for each signup node and see an overview of signups for all nodes (the overview is located in administer/signup)</p><br><p>Default settings for notification email address, reminder emails and confirmation emails are located in administer->settings->signup. These will be the default values used for a signup node unless otherwise specified (to configure these options per node, visit \'edit\' for that node and make the adjustments in the \'Sign up settings\' section)</p><br><p>Signups can be manually closed for any node at administer->signup.</p><br><p>The user signup form is fully themable--form fields may be added or deleted.  For more details see the instructions in signup.theme, where a sample user form is included</p>');
  }
}

/**
 * Implmentation of hook_menu()
 * @ingroup signup_core
 */
function signup_menu($may_cache) {

  $items = array();

  if ($may_cache) {
    
    //admin/settings/signup menu item
    $items[] = array('path' => 'admin/settings/signup', 'title' => t('signup'),
      'callback' => 'signup_settings_page', 
      'access' => user_access('access administration pages'));
      
    //admin/signup menu item
    $items[] = array('path' => 'admin/signup', 'title' => t('signup'),
      'callback' => 'signup_admin_page', 
      'access' => user_access('admin signups'));
      
    //user signup callback
    $items[] = array('path' => 'signup', 'access' => TRUE, 'type' => MENU_CALLBACK, 'callback' => 'signup_user_signup');
    
    //close signup callback
    $items[] = array('path' => 'closesignup', 'access' => TRUE, 'type' => MENU_CALLBACK, 'callback' => 'signup_close_signup');
  } else {
    
    //if it's a signup event, then put in a signup tab
  	if (db_num_rows(db_query("SELECT nid FROM {signup} WHERE nid = %d", arg(1)))) {
  	  $node = node_load(array('nid'=>arg(1)));
      $items[] = array('path' => 'node/' . arg(1) . '/signups', 'title' => t('signups'),
          'callback' => 'signup_user_signups_form', 'callback arguments' => array($node),
          'access' => user_access('admin signups'), 'type' => MENU_LOCAL_TASK, 'weight' => 20);

  	}
  }

  return $items;
}

/**
 * Implementation of hook_perm().
 * @ingroup signup_core
 */
function signup_perm() {
  return array('allow signups', 'admin signups');
}

/**
 * @defgroup signup_nodeapi Functions for nodeapi integration
 */

 /**
 * hook_nodeapi implementation
 *
 * @ingroup signup_nodeapi
*/ 
function signup_nodeapi(&$node, $op, $arg = 0) {
  switch ($op) {
    case 'settings':
    
      //inject this setting for all nodes types.  checking enables signups for the specified node type
      return form_checkbox(t('Allow signups'), 'signup_nodeapi_' . $node->type, $value = 1, 
        variable_get('signup_nodeapi_' . $node->type, FALSE) == 1, 
        t('if selected, users will be allowed to do signups for this node type'), $attributes = NULL, 
        $required = FALSE);
        break;
    case 'form post':
        if($node->signup || variable_get('signup_nodeapi_' . $node->type, 0)) {
          
          //pull the signup admin form data for this node, and display the form
          $result = db_fetch_object(db_query("SELECT * FROM {signup} WHERE nid = %d", ($node->nid ? $node->nid : 0)));            
          $node->signup = 1;
          $node->signup_forwarding_email = $result->forwarding_email;
          $node->signup_send_confirmation = $result->send_confirmation;
          $node->signup_confirmation_email = $result->confirmation_email;
          $node->signup_send_reminder  = $result->send_reminder ;
          $node->signup_reminder_days_before = $result->reminder_days_before;
          $node->signup_reminder_email = $result->reminder_email;
          $node->signup_completed = $result->completed;

          return _signup_admin_form($node);   
        }        
      break;
      
    case 'insert':
    
      //if it's a signup enabled node type, then insert a new row for this node
      if (variable_get('signup_nodeapi_' . $node->type, 0)) {
        $edit = $_POST['edit'];
        db_query("INSERT INTO {signup} (nid, forwarding_email, send_confirmation, confirmation_email,
        send_reminder, reminder_days_before, reminder_email) VALUES (%d, '%s', %d, '%s', %d, %d, '%s')", 
        $node->nid, $edit['signup_forwarding_email'], $edit['signup_send_confirmation'], $edit['signup_confirmation_email'],
        $edit['signup_send_reminder'], $edit['signup_reminder_days_before'], $edit['signup_reminder_email']);
      }       
      break;

    case 'update':
    
      //if this is a signup enabled node type, then update the signup info for the node
      if (variable_get('signup_nodeapi_' . $node->type, 0)) {
        db_query("UPDATE {signup} SET forwarding_email  = '%s', send_confirmation = %d, confirmation_email  = '%s',
          send_reminder = %d, reminder_days_before = %d, reminder_email = '%s'
          WHERE nid = %d", $node->signup_forwarding_email, $node->signup_send_confirmation, 
          $node->signup_confirmation_email, $node->signup_send_reminder, $node->signup_reminder_days_before, 
          $node->signup_reminder_email, $node->nid);         
      }
      break;

    case 'delete':

        //clean up the signup tables for the deleted node   
        db_query("DELETE FROM {signup} WHERE nid = %d", $node->nid);
        db_query("DELETE FROM {signup_log} WHERE nid = %d", $node->nid);
      break;
      
    case 'delete pre':        

      //if the node has any signups, prevent deletion and warn
      if (variable_get('signup_nodeapi_' . $node->type, FALSE) && ($user_signups = db_num_rows(db_query('SELECT nid 
        FROM {signup_log} WHERE nid = %d', $node->nid)))) {
      
        $data_to_inject = '<br>';
        drupal_set_message(t('WARNING: %d user(s) signed up for this event.  Deleting this event will delete 
        all signups associated with it!.', array('%title'=>$node->title, '%d'=>$user_signups)));
      } else {
        $data_to_inject = '<h4>' . t('No users signed up for this event') . '</h4>';  
      }
      return $data_to_inject;
      break;

    case 'load':
      if (variable_get('signup_nodeapi_' . $node->type, 0)) {

        //load signup data into the node.  if this is a new node, then load the defaults
        $result = db_fetch_object(db_query("SELECT * FROM {signup} WHERE nid = %d", ($node->nid ? $node->nid : 0)));              
        $node->signup = 1;
        $node->signup_forwarding_email = $result->forwarding_email;
        $node->signup_send_confirmation = $result->send_confirmation;
        $node->signup_confirmation_email = $result->confirmation_email;
        $node->signup_send_reminder  = $result->send_reminder ;
        $node->signup_reminder_days_before = $result->reminder_days_before;
        $node->signup_reminder_email = $result->reminder_email;
        $node->signup_completed = $result->completed;
      }
      
      break;
    case 'view':
    
      //if this is a signup node, start checks for what's to be printed
      if ($node->signup) {
        global $user;
        
        //the node has been closed for signups, and the user has signup permissions.  let them know it's closed
        if ($node->signup_completed) {
          if (user_access('allow signups')) {
            $output = '<h3>' . t('Signups closed for this event') . '</h3>';  
          }  
        } else {
          
          //this is an anonymous user. if they have signup permissions, then display a login link
          if ($user->uid == 0) {
            $node->body .= user_access('allow signups') ? t('<p>Please <a href="%login">login/register</a> to sign up 
              for this event.</p>', array("%login"=>url('user/login', drupal_get_destination()))) : '';
            break;
          }
          
          //check here to see if the user is already signed up for this node
          $result = db_query("SELECT signup_time, form_data FROM {signup_log} WHERE uid = %d AND nid =%d",
          $user->uid, $node->nid);
          $hidden = form_hidden('nid', $node->nid) . form_hidden('uid', $user->uid);
          
          if(db_num_rows($result) == 0) {
           
            //user isn't signed up, so check to make sure they have signup
            //permissions.  if this is the case, then print the themed signup form
            if (user_access('allow signups')) {
              $form_data = theme('signup_user_form') . $hidden . form_submit(t('Sign up'));
              $form = form($form_data, 'post', url('signup', drupal_get_destination()));
              $output = form_group(t('Sign up for %title', array('%title'=>$node->title)), $form);
            }
            
          //the user is already signed up, so print a table of their signup data, and give them the option to cancel
          } else {
            $result = db_fetch_object($result);
            $form_data = unserialize($result->form_data);
            $header = array(array('data' => t('Your signup information'), 'colspan' => 2));
            $rows = array();
            foreach ($form_data as $key => $value) {
              $rows[] = array($key . ':', $value);
            }
            $output = theme('table', $header, $rows) . form($hidden . form_submit(t('Cancel Signup')), 'post',
              url('signup', drupal_get_destination()));
          }
        }
        $node->body .= $output; 
      }
      break;
  }
}

/**
 * @defgroup signup_callback Functions which are the menu callbacks for this module
 */

/**
 * Prints the admin signup overview page located at admin/signup
 * @ingroup signup_callback
 */
function signup_admin_page() {
  
  //tests for optional support of event.module
  $_EVENT = module_exist('event');
  $event_select = $_EVENT ? ', e.event_start, e.timezone' : '';
  $event_join = $_EVENT ? ' LEFT JOIN {event} e ON e.nid = n.nid' : '';
  $event_order_by = $_EVENT ? ' e.event_start,' : '';
  
  //pull all open signup nodes, and start the creation of the table
  $result = db_query("SELECT n.title, n.nid$event_select FROM {signup} s INNER JOIN {node} n ON 
    n.nid = s.nid$event_join WHERE s.completed = 0 ORDER BY$event_order_by n.title");
  $output = "<h1>Signups</h1>";
  $header = array(t('Event'), t('Signups'), t('Operations'));
  $rows = array();
  
  //loop through the signup nodes, pull the number of signups for each, and create the summary table
  while ($event = db_fetch_object($result)) {
    $offset = $event->event_start ? event_get_offset($event->timezone, $event->event_start) : '';                
    $number_of_signups = db_fetch_array(db_query('SELECT COUNT(nid) FROM {signup_log} WHERE nid = %d', $event->nid));
    $rows[] = array('<a href="node/' . $event->nid . '">' . $event->title . '</a>' . ($event->event_start ? 
      '<br>' . _event_date(variable_get('signup_date_string', 'D, M jS, g:i A'), 
      $event->event_start, $offset) : ''), strval($number_of_signups['COUNT(nid)']), '<a href="node/' . $event->nid . '/signups">'
        . t('View Signups') . '</a> <a href="closesignup/' . $event->nid . '"><br>' . t('Close Event') . '</a>');   
  }
  $output .= theme('table', $header, $rows);
  print theme('page', $output);
  
}

/**
 * Callback function for canceling signups
 * @ingroup signup_callback
 */
function signup_cancel_signup($uid, $nid) {
  
  //delete the selected user from the log table and return to the previous page
  db_query("DELETE FROM {signup_log} WHERE uid = %d AND nid = %d", $uid, $nid);
  drupal_set_message(t('Signup cancelled'));
  drupal_goto();  

}
      
      
/**
 * Callback function for closing signups
 * @ingroup signup_callback
 */
function signup_close_signup($nid, $cron = 'no') {
  
  //close the specified node for signups, and head back to the admin/signup page if it's not a cron task
  db_query("UPDATE {signup} SET completed = 1 WHERE nid = %d", $nid);
  if ($cron == 'no') {
    drupal_goto('admin/signup');  
  } 
}

/**
 * Prints the settings page under admin/setttings/signup
 * @ingroup signup_callback
 */
function signup_settings_page() {
  $op = $_POST['op'];
  $edit = $_POST['edit'];
  
  //if the form has been submitted, update the data in the database
  switch ($op) {
    case t('Submit'):              
      db_query("UPDATE {signup} SET forwarding_email  = '%s', send_confirmation = %d, confirmation_email  = '%s',
          send_reminder = %d, reminder_days_before = %d, reminder_email = '%s'
          WHERE nid = 0", $edit['signup_forwarding_email'], $edit['signup_send_confirmation'], 
          $edit['signup_confirmation_email'], $edit['signup_send_reminder'], $edit['signup_reminder_days_before'], 
          $edit['signup_reminder_email']);
      drupal_set_message(t('Signup settings updated'));
      break;
  }
  
  //print the settings page
  $output = '<h2>' . t('Default signup information') . '</h2><br>' . t('New signup nodes will start with these settings');
  $output .= _signup_admin_form($node);
  $output .= form_submit(t('Submit'));
  print theme('page', form($output));
}

/**
 * Callback function which handles sending of emails upon user signup, and signup cancellations
 * @ingroup signup_callback
 */
function signup_user_signup() {
  
  $op = $_POST['op'];
  $edit = $_POST['edit'];
  global $user;
  
  switch ($op) {
    case t("Sign up"):
    
      //this check is in case a node type was enabled, and the node the user is trying to sign up for is not in
      //the signup table. this would be the case for all nodes created when signup.module was not enabled.  if 
      //no row exists for this node, then grab the signup defaults and create a new row before proceeding
      if (db_num_rows(db_query("SELECT * FROM {signup} WHERE nid = %d", $edit['nid'])) == 0) {
        $defaults = db_fetch_object(db_query("SELECT * FROM {signup} WHERE nid = 0"));
        db_query("INSERT INTO {signup} (nid, forwarding_email, send_confirmation, confirmation_email,
          send_reminder, reminder_days_before, reminder_email) VALUES (%d, '%s', %d, '%s', %d, %d, '%s')", 
          $edit['nid'], $defaults->signup_forwarding_email, $defaults->signup_send_confirmation, 
          $defaults->signup_confirmation_email, $defaults->signup_send_reminder, $defaults->signup_reminder_days_before, 
          $defaults->signup_reminder_email);
      }
      
      //get current time and serialize the user's signup data
      $curtime = time();
      $signup_form_data = serialize($edit['signup_form_data']);
      
      //pull this event from the signup table, determine if reminder/confirmation emails are going to be sent,
      //and inform the user
      $event = db_fetch_object(db_query("SELECT * FROM {signup} WHERE nid = %d", $edit['nid']));
      $confirmation_email = $event->send_confirmation ? '  ' . t('You will receive a confirmation email shortly 
        which contains  further event information') : '';
      $reminder_email = $event->send_reminder ? '  ' . t('You will receive a reminder email %d day(s) before the event', 
        array('%d' => $event->reminder_days_before)) : '';
      
      //insert the user into the signup_log
      db_query("INSERT INTO {signup_log} (uid, nid, signup_time, form_data) VALUES 
        (%d, %d, %d, '%s')", $edit['uid'], $edit['nid'], $curtime, $signup_form_data);       
        drupal_set_message(t('Signup confirmed.') . $confirmation_email . $reminder_email);

      //load the node, format the start time, and compose the user's signup data for later use in the emails
      $node = node_load(array('nid'=> $edit['nid']));
      $offset = $node->event_start ? event_get_offset($node->timezone, $node->event_start) : '';
      $starttime = $node->event_start ? _event_date(variable_get('signup_date_string', 'D, M jS, g:i A'), 
        $node->event_start, $offset) : t('[Untimed]');
      $signup_data_array = array();         
      foreach ($edit['signup_form_data'] as $key => $value) {
        $signup_data_array[] = $key . ': ' . $value; 
      }       
      $signup_data = t('SIGNUP INFORMATION') . "\n\r\n\r" . implode("\n\r", $signup_data_array);   
      $trans = array("%event" => $node->title, "%time" => $starttime, "%username" => $user->name, 
        "%useremail" => $user->mail, "%info" => $signup_data);     
      
      //if a confirmation is to be sent, compose the mail message, translate the string substitutions, and send it   
      if ($event->send_confirmation && $user->mail) {
        $header = "From: $event->forwarding_email\nReply-to: $event->forwarding_email\nX-Mailer:
          Drupal\nReturn-path: $event->forwarding_email\nErrors-to: $event->forwarding_email";
        $subject = t('Signup confirmation for event: %event', array('%event' => $node->title));        
        $message = strtr($event->confirmation_email, $trans);
        user_mail($user->mail, $subject, $message, $header);
      }
      
      //if a forwarding email is to be sent, compose the mail message, translate the string substitutions, and send it  
      if ($event->forwarding_email) {
        $site_mail = variable_get('site_mail', 'noadmin@noadmin.com');
        $header = "From: " . t('New Event Signup') . "\nReply-to: $site_mail\nX-Mailer:
          Drupal\nReturn-path: $site_mail\nErrors-to: $site_mail";
        $subject = t('Signup confirmation for event: %title', array('%title' => $node->title));        
        $message = t('The following information was submitted as a signup for %title', array('%title' => $node->title)) .
          "\n\r" . t('Date/Time: %time', array('%time'=>$starttime)) . ":\n\r\n\r\n\r" . t('username:') . $user->name . 
          "\n\r" . t('email:') . $user->mail . "\n\r\n\r" . $signup_data;
        user_mail($event->forwarding_email, $subject, $message, $header);
      }   
        
      break;
      
    //user has elected to cancel their signup, so delete them from the log, and warn
    case t('Cancel Signup'):
      signup_cancel_signup($edit['uid'], $edit['nid']);
      break;
  }
  
  //send the user back to the same page, or to node if it's not available
  $dest = $_REQUEST['destination'];
  unset($_REQUEST['destination']);
  if ($dest) {
    //go back to the original node...
    drupal_goto($dest);
  } else {
    // last resort
    drupal_goto('node');
  }
   
}

/**
 * Prints the signup details for a single node when the signups tab is clicked
 * @ingroup signup_callback
 */
function signup_user_signups_form($node) {

  //pull all user signed up for this event, and start table creation
  $result = db_query("SELECT u.uid, u.name, s.signup_time, s.form_data FROM {signup_log} s INNER JOIN {users} u ON 
    u.uid = s.uid WHERE s.nid =%d", $node->nid);
  $output = "<h1>" . $node->title . "</h1>";
  $header = array(array('data' => t('%d individual(s) signed up', array('%d' => db_num_rows($result))), 'colspan' => 3));
  $rows = array();
  
  //get default timezone offset for the site
  $offset = intval(variable_get('date_default_timezone', 0));
  
  //loop through the users, unserializing their user data
  while ($signed_up_user = db_fetch_object($result)) {
    $table_data = array();
    $form_data = unserialize($signed_up_user->form_data); 

    //compose the user data   
    foreach ($form_data as $key => $value) {
      $table_data[] = $key . ': ' . $value; 
    }
    
    //build the row for this user  
    $rows[] = array('<a href="user/' . $signed_up_user->uid . '">' . $signed_up_user->name . '</a><br>' . 
      gmdate(variable_get('signup_date_string', 'M jS, g:i A'), $signed_up_user->signup_time - $offset), 
      implode('<br>', $table_data), form(form_hidden('nid', $node->nid) . form_hidden('uid', $signed_up_user->uid) . 
      form_submit(t('Cancel Signup')), 'post', url('signup', drupal_get_destination())));   
  }
  $output .= theme('table', $header, $rows);
  print theme('page', $output);
}

/**
 * @defgroup signup_internal Internal module functions
 */

/**
 * Returns the signup admin form to either the settings page or the node edit page
 * @ingroup signup_internal
 */
function _signup_admin_form($node) {
  
  //load the default admin form data for new nodes
  if(!$node) {
    $result = db_fetch_object(db_query("SELECT * FROM {signup} WHERE nid = 0")); 
    $node->signup_forwarding_email = $result->forwarding_email;
    $node->signup_send_confirmation = $result->send_confirmation;
    $node->signup_confirmation_email = $result->confirmation_email;
    $node->signup_send_reminder  = $result->send_reminder;
    $node->signup_reminder_days_before = $result->reminder_days_before;
    $node->signup_reminder_email = $result->reminder_email; 
  }
  
  //compose the form fields
  $form = '';
  $form .= form_textfield(t('Send signups to'), 'signup_forwarding_email', $node->signup_forwarding_email, 40, 64, 
    $description = t('Email address where notification of new signups will be sent. Leave blank for no notifications'), 
    $attributes = NULL, $required = FALSE);
  $form .= form_checkbox(t('Send confirmation'), 'signup_send_confirmation', $value = 1, $node->signup_send_confirmation, 
    $description = NULL, $attributes = NULL, $required = FALSE);
  $form .= form_textarea(t('Confirmation email'), 'signup_confirmation_email', $node->signup_confirmation_email, 40, 6,
    $description = t('Email sent to user upon signup. Supported string substitutions: %event, %time, %username, %useremail, 
    %info (user signup information)'), $attributes = NULL, $required = FALSE);
  $form .= '<div class="container-inline">' . form_checkbox(t('Send reminder'), 'signup_send_reminder', $value = 1,
    $node->signup_send_reminder, $description = NULL, $attributes = NULL, $required = FALSE);
  $options = array ();
  for ($i = 1; $i <= 60; $i++) {
    $options[$i] = $i;
  }
  $form .= form_select('', 'signup_reminder_days_before', $node->signup_reminder_days_before, $options, $description = NULL, 
    $extra = 0, $multiple = FALSE, $required = FALSE);
  $form .= "day(s) before event</div>";
  $form .= form_textarea(t('Reminder email'), 'signup_reminder_email', $node->signup_reminder_email, 40, 6, 
    $description = t('Email sent to user as an event reminder. Supported string substitutions: %event, %time, %username, 
    %useremail'), $attributes = NULL, $required = FALSE);
  $form .= form_hidden('signup', 1, $edit = 'edit');

  return form_group(t('Signup information'), $form, $description = NULL, $attributes = NULL);
}

?>