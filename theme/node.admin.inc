<?php
// $Id$


/**
 * @file
 * Theme functions for the signup node administration page (node/N/signups).
 */

/**
 * Theme function for the signup administrative tab (node/N/signups).
 *
 * This is responsible for rendering the signup summary form (allows
 * admins to open/close signups, set a signup limit, and see the total
 * number of signups), the table of signup details (generated by
 * signup_node_admin_page()), and if the node is signup-enabled, the
 * form to signup other users.
 *
 * @param $node
 *   The node object for the signup-enabled node this is a tab on.
 * @param $header
 *   Array containing the header for the signup details table.
 * @param $rows
 *   Array containing the rows for the signup details table, keyed by
 *   column name.
 */
function theme_signup_node_admin_page($node, $header, $rows) {
  $output = '';

  // Administrative table to control signups for this node.
  $output .= drupal_get_form('signup_admin_node_form', $node);

  $signup_details_table = theme('table', $header, $rows);

  $fieldset = array(
    '#title' => t('Signup details'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#value' => $signup_details_table,
  );
  $output .= theme('fieldset', $fieldset);

  if ($node->signup_status) {
    // Add a form to allow the administrator to signup other users.
    $output .= drupal_get_form('signup_form', $node, 'admin');
  }

  return $output;
}

function theme_signup_admin_node_form($form) {
  $row = array(
    drupal_render($form['status']),
    drupal_render($form['total']),
    drupal_render($form['limit']),
    drupal_render($form),
  );
  $header = array(
    t('Status'),
    t('Total'),
    t('Limit'),
    t('Operations'),
  );
  $fieldset = array(
    '#title' => t('Signup summary'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#value' => theme('table', $header, array($row)),
  );
  return theme('fieldset', $fieldset);
}

/**
 * Renders custom signup user data into a human-readable format.
 *
 * WARNING: This theme function is recursive (it calls itself for
 * nested data), so if you override it, be sure not to change the part
 * where it does "call_user_func(__FUNCTION__)".
 *
 * @param $data
 *   Array of custom user signup data.
 *
 * @return
 *   User data directly formatted in divs.
 *
 * @see theme_signup_user_form()
 */
function theme_signup_custom_data($data) {
  $output = '';
  // Loop through each first level element.
  foreach ($data as $key => $value) {
    $output .= '<div id="'. signup_id_safe($key) .'">';
    if (is_array($value)) {
      // Element is nested, render it recursively.
      // Instead of the overhead of theme(), just call ourself directly.
      $output .= call_user_func(__FUNCTION__, $value);
    }
    else {
      $output .= $key .': '. check_plain($value);
    }
    $output .= "</div>\n";
  }
  return $output;
}

